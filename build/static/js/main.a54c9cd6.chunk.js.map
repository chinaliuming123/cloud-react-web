{"version":3,"sources":["config/index.ts","pages/Home.tsx","routes/config.ts","utils/index.ts","pages/404.tsx","routes/index.tsx","layout/index.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["config","envId","require","storageBaseUrl","Search","appRoutes","path","component","app","window","tcb","init","env","auth","persistence","getApp","db","database","useState","loginLoading","setLoginLoading","customLogin","a","anonymousAuthProvider","signIn","getLoginState","loginState","console","log","isAnonymous","collection","get","res","span","offset","size","placeholder","enterButton","loading","onSearch","status","title","subTitle","extra","RenderRoutes","map","route","index","key","exact","strict","Header","Content","MainLayout","props","className","style","height","width","src","href","padding","display","flexDirection","flex","background","bordered","overflow","children","menus","filter","item","menu","App","setLoading","script","document","createElement","type","head","appendChild","Promise","resolve","onload","loadScript","then","active","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a54c9cd6.chunk.js","sourcesContent":["/* eslint-disable */\nconst cloudbaseConfig = require('../../cloudbaserc')\n\nexport const config = {\n  envId: cloudbaseConfig.envId,\n  storageBaseUrl: ''\n}\n","import React, { useState } from 'react'\nimport { Row, Col, Input } from 'antd'\nimport { getApp } from '@/utils'\n// import { config } from '@/config'\n\nconst { Search } = Input\n\nexport const Home: React.FC<{}> = () => {\n  const app = getApp()\n  const db = app.database()\n  const [loginLoading, setLoginLoading] = useState(false)\n\n  const customLogin = async () => {\n    setLoginLoading(true)\n    const auth = app.auth();\n    await auth.anonymousAuthProvider().signIn();\n    // 匿名登录成功检测登录状态isAnonymous字段为true\n    const loginState = await auth.getLoginState();\n    console.log(loginState.isAnonymous); // true\n\n    const res = await db.collection('todos').get()\n    console.log(res)\n    setLoginLoading(false)\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col span={8} offset={8}>\n        </Col>\n      </Row>\n      <Row>\n        <Col span={12} offset={6}>\n          <Search\n            size=\"middle\"\n            placeholder=\"输入你的用户名，用户名长度必须大于 4 位，由字母和数字组成\"\n            enterButton=\"自定义登录\"\n            loading={loginLoading}\n            onSearch={customLogin}\n          />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n","import { RouteProps } from 'react-router'\nimport { Home, NoFoundPage } from '../pages'\n\nexport interface IRouteProps extends RouteProps {\n  menu?: boolean\n  title?: string\n}\n\n\nexport const appRoutes: IRouteProps[] = [\n  {\n    path: '/',\n    component: Home\n  },\n  {\n    path: '**',\n    component: NoFoundPage\n  }\n]\n","import { config } from '@/config'\n\nexport const getApp = () => {\n  const app = window.tcb.init({\n    env: config.envId\n  })\n\n  app.auth({\n    persistence: 'local'\n  })\n  return app\n}\n","import { Result } from 'antd'\nimport React from 'react'\n\nexport const NoFoundPage: React.FC<{}> = () => (\n  <Result\n    status=\"404\"\n    title=\"404\"\n    subTitle=\"Sorry, the page you visited does not exist.\"\n    extra={<span>Back Home</span>}\n  />\n)\n\n","import React from 'react'\nimport { Switch, Route, RouteProps } from 'react-router-dom'\nimport { appRoutes } from './config'\nexport * from './config'\n\nfunction SwitchRoutes(appRoutes: RouteProps[]) {\n  return (\n    <Switch>\n      {appRoutes.map((route, index) => (\n        <Route\n          key={index}\n          path={route.path}\n          component={route.component}\n          exact={route.exact || true}\n          strict={route.strict || false}\n        />\n      ))}\n    </Switch>\n  )\n}\n\nexport function RenderRoutes() {\n  return SwitchRoutes(appRoutes)\n}\n","import React from 'react'\nimport { Layout, Card, Avatar } from 'antd'\n// import { useHistory } from 'react-router'\nimport { IRouteProps } from '@/routes/config'\nimport { config } from '@/config'\nimport './index.less'\n\nconst { Header, Content } = Layout\n\nexport interface ILayoutProps {\n  menus: IRouteProps[]\n}\n\nexport function MainLayout(props: React.PropsWithChildren<ILayoutProps>) {\n\n  return (\n    <div className=\"App\">\n      <Layout style={{ height: '100%' }}>\n        <Header className=\"header flex\">\n          <div className=\"logo\">\n            <Avatar\n              style={{ height: '40px', width: '40px' }}\n              src={`${config.storageBaseUrl}/icon.png`}\n            />\n          </div>\n          <div className=\"home\">\n            <a href=\"/\">Home</a>\n          </div>\n        </Header>\n        <Content style={{ padding: '0 50px', display: 'flex', flexDirection: 'column' }}>\n          <Layout style={{ padding: '24px 0', flex: '1 1 auto', background: '#fff' }}>\n            <Content style={{ padding: '0 24px' }}>\n              <Card className=\"card\" bordered={false}>\n                <div className=\"card-content\" style={{ overflow: 'auto' }}>\n                  {props.children}\n                </div>\n              </Card>\n            </Content>\n          </Layout>\n        </Content>\n      </Layout>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport { Skeleton } from 'antd'\nimport { BrowserRouter } from 'react-router-dom'\nimport { RenderRoutes, appRoutes } from './routes'\nimport { MainLayout } from './layout'\nimport 'antd/dist/antd.css'\nimport './App.less'\n\nconst menus = appRoutes.filter((item) => item.menu)\n\nfunction App() {\n  const [loading, setLoading] = useState(true)\n  const loadScript = async () => {\n    const script = document.createElement('script')\n    script.type = 'text/javascript'\n    script.src = 'https://imgcache.qq.com/qcloud/tcbjs/1.5.0/tcb.js'\n    document.head.appendChild(script)\n\n    return new Promise((resolve) => {\n      script.onload = () => {\n        resolve()\n      }\n    })\n  }\n\n  loadScript().then(() => {\n    setLoading(false)\n  })\n\n  return (\n    <div className=\"App\">\n      <MainLayout menus={menus}>{loading ? <Skeleton active /> : RenderRoutes()}</MainLayout>\n    </div>\n  )\n}\n\nexport default () => {\n  return (\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as online.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport './index.less'\n\ndeclare global {\n  interface Window {\n    tcb: any\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}